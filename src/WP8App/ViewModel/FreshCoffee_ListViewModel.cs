// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   ViewModel.tt
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls=WPAppStudio.Controls;
using Entities=WPAppStudio.Entities;
using EntitiesBase=WPAppStudio.Entities.Base;
using IServices=WPAppStudio.Services.Interfaces;
using IViewModels=WPAppStudio.ViewModel.Interfaces;
using Localization=WPAppStudio.Localization;
using Repositories=WPAppStudio.Repositories;
using Services=WPAppStudio.Services;
using ViewModelsBase=WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of FreshCoffee_List ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class FreshCoffee_ListViewModel : ViewModelsBase.VMBase, IViewModels.IFreshCoffee_ListViewModel
    {       

		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly IServices.ILockScreenService _lockScreenService;
		private readonly Repositories.IFreshCoffee_FreshCoffee _freshCoffee_FreshCoffee;
		private readonly IServices.IInternetService _internetService;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="FreshCoffee_ListViewModel" /> class.
        /// </summary>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="lockScreenService">The Lock Screen Service.</param>
        /// <param name="freshCoffee_FreshCoffee">The Fresh Coffee_ Fresh Coffee.</param>
        /// <param name="internetService">The Internet Service.</param>
        public FreshCoffee_ListViewModel(IServices.IDialogService dialogService, IServices.INavigationService navigationService, IServices.ILockScreenService lockScreenService, Repositories.IFreshCoffee_FreshCoffee freshCoffee_FreshCoffee, IServices.IInternetService internetService)
        {
			_dialogService = dialogService;
			_navigationService = navigationService;
			_lockScreenService = lockScreenService;
			_freshCoffee_FreshCoffee = freshCoffee_FreshCoffee;
			_internetService = internetService;
        }
		
	    /// <summary>
        /// IsInternetAvalaible property.
        /// </summary>		
        public Visibility IsInternetAvalaible
        {
	      get
          {
				return _internetService.IsNetworkAvailable() ? Visibility.Collapsed : Visibility.Visible; 
           }
		}
	
		private ObservableCollection<Entities.FreshCoffeeSchema> _freshCoffee_ListListControlCollection;

        /// <summary>
        /// FreshCoffee_ListListControlCollection property.
        /// </summary>		
        public ObservableCollection<Entities.FreshCoffeeSchema> FreshCoffee_ListListControlCollection
        {
            get
            {
				
                if(_freshCoffee_ListListControlCollection == null)
					_freshCoffee_ListListControlCollection = _freshCoffee_FreshCoffee.GetData();
				return _freshCoffee_ListListControlCollection;     
            }
            set
            {
                SetProperty(ref _freshCoffee_ListListControlCollection, value);
            }
        }
	
		private int _freshCoffee_ListListControlCollectionPageNumber;

        /// <summary>
        /// FreshCoffee_ListListControlCollectionPageNumber property.
        /// </summary>		
        public int FreshCoffee_ListListControlCollectionPageNumber
        {
            get
            {
				return _freshCoffee_ListListControlCollectionPageNumber;
            }
            set
            {
                SetProperty(ref _freshCoffee_ListListControlCollectionPageNumber, value);
            }
        }
	
		private Entities.FreshCoffeeSchema _selectedFreshCoffee_ListListControlCollection;

        /// <summary>
        /// SelectedFreshCoffee_ListListControlCollection property.
        /// </summary>		
        public Entities.FreshCoffeeSchema SelectedFreshCoffee_ListListControlCollection
        {
            get
            {
				return _selectedFreshCoffee_ListListControlCollection;
            }
            set
            {
                _selectedFreshCoffee_ListListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<IViewModels.IFreshCoffee_DetailViewModel>(_selectedFreshCoffee_ListListControlCollection);
            }
        }

        /// <summary>
        /// Delegate method for the GetFreshCoffee_ListListControlCollectionCommand command.
        /// </summary>
        public  void GetFreshCoffee_ListListControlCollectionCommandDelegate(int pageNumber= 0) 
        {
				GetFreshCoffee_ListListControlCollectionData(pageNumber);
        }
		

        private ICommand _getFreshCoffee_ListListControlCollectionCommand;

        /// <summary>
        /// Gets the GetFreshCoffee_ListListControlCollectionCommand command.
        /// </summary>
        public ICommand GetFreshCoffee_ListListControlCollectionCommand
        {
            get { return _getFreshCoffee_ListListControlCollectionCommand = _getFreshCoffee_ListListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand<int>(GetFreshCoffee_ListListControlCollectionCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the SetLockScreenCommand command.
        /// </summary>
        public  void SetLockScreenCommandDelegate() 
        {
				_lockScreenService.SetLockScreen("DoWapp-Splashscreen-WXGA-black.png");
        }
		

        private ICommand _setLockScreenCommand;

        /// <summary>
        /// Gets the SetLockScreenCommand command.
        /// </summary>
        public ICommand SetLockScreenCommand
        {
            get { return _setLockScreenCommand = _setLockScreenCommand ?? new ViewModelsBase.DelegateCommand(SetLockScreenCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the AboutCommand command.
        /// </summary>
        public  void AboutCommandDelegate() 
        {
				_navigationService.NavigateTo<IViewModels.IAboutViewModel>();
        }
		

        private ICommand _aboutCommand;

        /// <summary>
        /// Gets the AboutCommand command.
        /// </summary>
        public ICommand AboutCommand
        {
            get { return _aboutCommand = _aboutCommand ?? new ViewModelsBase.DelegateCommand(AboutCommandDelegate); }
        }

        private void GetFreshCoffee_ListListControlCollectionData(int pageNumber = 0)
        {
				FreshCoffee_ListListControlCollectionPageNumber = pageNumber;

                if (pageNumber == 0)
				{
					var items = _freshCoffee_FreshCoffee.GetData(pageNumber);
                    FreshCoffee_ListListControlCollection = items;
				}
                else   
				{
					var items = _freshCoffee_FreshCoffee.GetData(pageNumber);
                    foreach (var item in items)                    
                        FreshCoffee_ListListControlCollection.Add(item);
				}
		}
    }
}
